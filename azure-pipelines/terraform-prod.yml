trigger: none

pr: none

parameters:
- name: action
  displayName: 'Terraform Action'
  type: string
  default: 'plan'
  values:
  - plan
  - apply
  - destroy

- name: confirmProduction
  displayName: 'Confirm Production Deployment (type CONFIRM)'
  type: string
  default: ''

variables:
- group: terraform-prod
- name: terraformVersion
  value: '1.9.8'
- name: workingDirectory
  value: '$(System.DefaultWorkingDirectory)/environments/prod'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: ValidateInput
  displayName: 'Validate Production Input'
  condition: or(eq('${{ parameters.action }}', 'apply'), eq('${{ parameters.action }}', 'destroy'))
  jobs:
  - job: ValidateConfirmation
    displayName: 'Validate Confirmation'
    steps:
    - task: PowerShell@2
      displayName: 'Check Production Confirmation'
      inputs:
        targetType: 'inline'
        script: |
          if ('${{ parameters.confirmProduction }}' -ne 'CONFIRM') {
            Write-Host "‚ùå Production deployment not confirmed. Please type 'CONFIRM' exactly." -ForegroundColor Red
            exit 1
          }
          Write-Host "‚úÖ Production deployment confirmed" -ForegroundColor Green

- stage: Validate
  displayName: 'Validate Terraform'
  dependsOn: 
  - ValidateInput
  condition: or(succeeded(), eq('${{ parameters.action }}', 'plan'))
  jobs:
  - job: Validate
    displayName: 'Terraform Validate'
    steps:
    - task: TerraformInstaller@1
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: $(terraformVersion)

    - task: AzureCLI@2
      displayName: 'Terraform Init'
      inputs:
        azureSubscription: 'azure-terraform-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: $(workingDirectory)
        inlineScript: |
          terraform init

    - task: AzureCLI@2
      displayName: 'Terraform Validate'
      inputs:
        azureSubscription: 'azure-terraform-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: $(workingDirectory)
        inlineScript: |
          terraform validate

- stage: Plan
  displayName: 'Plan Terraform'
  dependsOn: Validate
  condition: succeeded()
  jobs:
  - job: Plan
    displayName: 'Terraform Plan'
    steps:
    - task: TerraformInstaller@1
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: $(terraformVersion)

    - task: AzureCLI@2
      displayName: 'Terraform Init'
      inputs:
        azureSubscription: 'azure-terraform-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: $(workingDirectory)
        inlineScript: |
          terraform init

    - task: AzureCLI@2
      displayName: 'Terraform Plan'
      inputs:
        azureSubscription: 'azure-terraform-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: $(workingDirectory)
        inlineScript: |
          terraform plan -detailed-exitcode -out=tfplan

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Plan File'
      condition: eq('${{ parameters.action }}', 'apply')
      inputs:
        targetPath: '$(workingDirectory)/tfplan'
        artifact: 'terraform-plan-prod'
        publishLocation: 'pipeline'

- stage: Apply
  displayName: 'Apply Terraform'
  dependsOn: Plan
  condition: and(succeeded(), eq('${{ parameters.action }}', 'apply'))
  jobs:
  - deployment: Apply
    displayName: 'Terraform Apply'
    environment: 'prod'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(terraformVersion)

          - task: DownloadPipelineArtifact@2
            displayName: 'Download Plan File'
            inputs:
              buildType: 'current'
              artifactName: 'terraform-plan-prod'
              targetPath: $(workingDirectory)

          - task: AzureCLI@2
            displayName: 'Terraform Init'
            inputs:
              azureSubscription: 'azure-terraform-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              workingDirectory: $(workingDirectory)
              inlineScript: |
                terraform init

          - task: AzureCLI@2
            displayName: 'Production Deployment Notice'
            inputs:
              azureSubscription: 'azure-terraform-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "üö® PRODUCTION DEPLOYMENT STARTING"
                echo "This will make changes to the production environment."
                echo "Plan has been reviewed and approved for deployment."

          - task: AzureCLI@2
            displayName: 'Terraform Apply'
            inputs:
              azureSubscription: 'azure-terraform-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              workingDirectory: $(workingDirectory)
              inlineScript: |
                terraform apply -auto-approve tfplan

          - task: AzureCLI@2
            displayName: 'Post Deployment Summary'
            condition: succeeded()
            inputs:
              azureSubscription: 'azure-terraform-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "üéâ Production Deployment Successful!"
                echo "Environment: Production"
                echo "Build: $(Build.BuildNumber)"
                echo "Deployed by: $(Build.RequestedFor)"
                echo "Commit: $(Build.SourceVersion)"
                echo ""
                echo "üîó Next Steps:"
                echo "- Verify deployment health"
                echo "- Update monitoring dashboards"
                echo "- Notify stakeholders"

- stage: Destroy
  displayName: 'Destroy Terraform'
  dependsOn: Plan
  condition: and(succeeded(), eq('${{ parameters.action }}', 'destroy'))
  jobs:
  - deployment: Destroy
    displayName: 'Terraform Destroy'
    environment: 'prod'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(terraformVersion)

          - task: AzureCLI@2
            displayName: 'Terraform Init'
            inputs:
              azureSubscription: 'azure-terraform-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              workingDirectory: $(workingDirectory)
              inlineScript: |
                terraform init

          - task: AzureCLI@2
            displayName: 'Production Destroy Warning'
            inputs:
              azureSubscription: 'azure-terraform-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "‚ö†Ô∏è WARNING: PRODUCTION ENVIRONMENT DESTRUCTION"
                echo "This will DESTROY the production environment!"
                sleep 10

          - task: AzureCLI@2
            displayName: 'Terraform Destroy'
            inputs:
              azureSubscription: 'azure-terraform-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              workingDirectory: $(workingDirectory)
              inlineScript: |
                terraform destroy -auto-approve