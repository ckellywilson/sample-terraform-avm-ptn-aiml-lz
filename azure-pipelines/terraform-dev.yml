trigger:
  branches:
    include:
    - main
    - master
  paths:
    include:
    - environments/dev/*
    - modules/*

pr:
  branches:
    include:
    - main
    - master
  paths:
    include:
    - environments/dev/*
    - modules/*

variables:
- group: terraform-dev
- name: terraformVersion
  value: '1.9.8'
- name: workingDirectory
  value: '$(System.DefaultWorkingDirectory)/environments/dev'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Validate
  displayName: 'Validate Terraform'
  jobs:
  - job: Validate
    displayName: 'Terraform Validate'
    steps:
    - task: TerraformInstaller@1
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: $(terraformVersion)

    - task: AzureCLI@2
      displayName: 'Terraform Init'
      inputs:
        azureSubscription: 'azure-terraform-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: $(workingDirectory)
        inlineScript: |
          terraform init

    - task: AzureCLI@2
      displayName: 'Terraform Format Check'
      inputs:
        azureSubscription: 'azure-terraform-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: $(workingDirectory)
        inlineScript: |
          terraform fmt -check -recursive

    - task: AzureCLI@2
      displayName: 'Terraform Validate'
      inputs:
        azureSubscription: 'azure-terraform-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: $(workingDirectory)
        inlineScript: |
          terraform validate

- stage: Plan
  displayName: 'Plan Terraform'
  dependsOn: Validate
  condition: succeeded()
  jobs:
  - job: Plan
    displayName: 'Terraform Plan'
    steps:
    - task: TerraformInstaller@1
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: $(terraformVersion)

    - task: AzureCLI@2
      displayName: 'Terraform Init'
      inputs:
        azureSubscription: 'azure-terraform-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: $(workingDirectory)
        inlineScript: |
          terraform init

    - task: AzureCLI@2
      displayName: 'Terraform Plan'
      inputs:
        azureSubscription: 'azure-terraform-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: $(workingDirectory)
        inlineScript: |
          terraform plan -detailed-exitcode -out=tfplan
          echo "##vso[task.setvariable variable=PLAN_EXITCODE]$?"

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Plan File'
      inputs:
        targetPath: '$(workingDirectory)/tfplan'
        artifact: 'terraform-plan-dev'
        publishLocation: 'pipeline'

- stage: Apply
  displayName: 'Apply Terraform'
  dependsOn: Plan
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Apply
    displayName: 'Terraform Apply'
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(terraformVersion)

          - task: DownloadPipelineArtifact@2
            displayName: 'Download Plan File'
            inputs:
              buildType: 'current'
              artifactName: 'terraform-plan-dev'
              targetPath: $(workingDirectory)

          - task: AzureCLI@2
            displayName: 'Terraform Init'
            inputs:
              azureSubscription: 'azure-terraform-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              workingDirectory: $(workingDirectory)
              inlineScript: |
                terraform init

          - task: AzureCLI@2
            displayName: 'Terraform Apply'
            inputs:
              azureSubscription: 'azure-terraform-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              workingDirectory: $(workingDirectory)
              inlineScript: |
                terraform apply -auto-approve tfplan

          - task: AzureCLI@2
            displayName: 'Output Deployment Summary'
            inputs:
              azureSubscription: 'azure-terraform-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              workingDirectory: $(workingDirectory)
              inlineScript: |
                echo "ðŸŽ¯ Development Environment Deployed Successfully!"
                echo "Environment: Dev"
                echo "Build: $(Build.BuildNumber)"
                echo "Commit: $(Build.SourceVersion)"